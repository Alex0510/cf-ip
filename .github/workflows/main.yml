name: Fetch IP Addresses

on:
  # 每3小时运行一次
  schedule:
    - cron: '0 */3 * * *'
  # 允许手动触发
  workflow_dispatch:

jobs:
  fetch-ips:
    runs-on: ubuntu-latest
    
    # 需要写入权限
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 获取完整历史记录，以便后续提交
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Run IP fetcher script
      run: |
        cat > fetch_ips.py << 'EOF'
        import requests
        import re
        import os
        import json
        import time
        import socket
        import struct

        # 目标URL列表
        urls = [
            'https://ip.164746.xyz', 
            'https://cf.090227.xyz', 
            'https://stock.hostmonit.com/CloudFlareYes',
            'https://www.wetest.vip/page/cloudflare/address_v4.html'
        ]

        # 正则表达式用于匹配IP地址
        ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'

        # 使用集合存储IP地址实现自动去重
        all_ips = set()

        for url in urls:
            try:
                # 添加User-Agent头以避免被某些网站阻止
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                
                # 发送HTTP请求获取网页内容
                response = requests.get(url, headers=headers, timeout=10)
                
                # 确保请求成功
                if response.status_code == 200:
                    # 获取网页的文本内容
                    html_content = response.text
                    
                    # 使用正则表达式查找IP地址
                    ip_matches = re.findall(ip_pattern, html_content, re.IGNORECASE)
                    
                    # 将找到的IP添加到集合中
                    all_ips.update(ip_matches)
                    print(f'从 {url} 找到 {len(ip_matches)} 个IP地址')
                else:
                    print(f'请求 {url} 失败，状态码: {response.status_code}')
            except requests.exceptions.RequestException as e:
                print(f'请求 {url} 失败: {e}')
                continue

        # 验证IP地址是否有效的函数
        def is_valid_ip(ip):
            try:
                # 检查IP格式是否正确
                parts = ip.split('.')
                if len(parts) != 4:
                    return False
                
                # 检查每个部分是否为0-255之间的整数
                for part in parts:
                    num = int(part)
                    if num < 0 or num > 255:
                        return False
                
                # 检查是否为私有IP地址
                first_octet = int(parts[0])
                second_octet = int(parts[1])
                
                # 私有IP范围:
                # 10.0.0.0 - 10.255.255.255
                # 172.16.0.0 - 172.31.255.255
                # 192.168.0.0 - 192.168.255.255
                # 127.0.0.0 - 127.255.255.255 (localhost)
                # 169.254.0.0 - 169.254.255.255 (link-local)
                if (first_octet == 10 or
                    (first_octet == 172 and 16 <= second_octet <= 31) or
                    (first_octet == 192 and second_octet == 168) or
                    first_octet == 127 or
                    (first_octet == 169 and second_octet == 254)):
                    return False
                
                # 检查是否为多播地址 (224.0.0.0 - 239.255.255.255)
                if 224 <= first_octet <= 239:
                    return False
                
                # 检查是否为保留地址 (240.0.0.0 - 255.255.255.254)
                if first_octet >= 240:
                    return False
                
                return True
                
            except (ValueError, IndexError):
                return False

        # 过滤出有效的公网IP地址
        valid_ips = set()
        invalid_ips = set()
        
        for ip in all_ips:
            if is_valid_ip(ip):
                valid_ips.add(ip)
            else:
                invalid_ips.add(ip)
        
        print(f'找到 {len(all_ips)} 个IP地址，其中有效公网IP: {len(valid_ips)} 个，无效IP: {len(invalid_ips)} 个')
        
        if invalid_ips:
            print('无效IP地址示例:')
            for ip in list(invalid_ips)[:10]:  # 只显示前10个无效IP
                print(f'  {ip}')

        # 获取IP地理位置信息的函数
        def get_ip_location(ip):
            try:
                # 使用多个API备用
                apis = [
                    f"http://ip-api.com/json/{ip}?fields=status,message,country",
                    f"https://ipapi.co/{ip}/country_name/",
                ]
                
                for api_url in apis:
                    try:
                        time.sleep(0.1)  # 避免请求过于频繁
                        response = requests.get(api_url, timeout=5)
                        
                        if api_url.startswith('http://ip-api.com'):
                            data = response.json()
                            if data.get('status') == 'success':
                                country = data.get('country', '未知')
                                if country and country != 'Unknown':
                                    return f"{ip}#{country}"
                        
                        elif api_url.startswith('https://ipapi.co'):
                            country = response.text.strip()
                            if country and country not in ['Undefined', 'None', '']:
                                return f"{ip}#{country}"
                                
                    except:
                        continue
                
                return f"{ip}#未知位置"
            except:
                return f"{ip}#未知位置"

        # 将有效的IP地址按数字顺序排序并添加位置信息后写入文件
        if valid_ips:
            # 按IP地址的数字顺序排序（非字符串顺序）
            sorted_ips = sorted(valid_ips, key=lambda ip: [int(part) for part in ip.split('.')])
            
            # 为每个IP获取地理位置信息
            ip_with_location = []
            for ip in sorted_ips:
                location = get_ip_location(ip)
                ip_with_location.append(location)
                print(f"处理: {location}")
            
            with open('ip.txt', 'w') as file:
                for ip_line in ip_with_location:
                    file.write(ip_line + '\n')
            print(f'已保存 {len(ip_with_location)} 个有效的带位置信息的IP地址到ip.txt文件。')
        else:
            print('未找到有效的IP地址。')
            # 创建一个空文件，避免后续步骤出错
            with open('ip.txt', 'w') as file:
                file.write('')
        EOF
        
        python fetch_ips.py

    - name: Check for changes
      id: git-check
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push if changed
      if: steps.git-check.outputs.changed == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add ip.txt
        git commit -m "Auto-update IP addresses - $(date +'%Y-%m-%d %H:%M:%S')"
        git push
