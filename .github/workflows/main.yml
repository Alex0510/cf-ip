name: Fetch IP Addresses

on:
  # 每3小时运行一次
  schedule:
    - cron: '0 */3 * * *'
  # 允许手动触发
  workflow_dispatch:

jobs:
  fetch-ips:
    runs-on: ubuntu-latest
    
    # 需要写入权限
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 获取完整历史记录，以便后续提交
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Run IP fetcher script
      run: |
        cat > fetch_ips.py << 'EOF'
        import requests
        import re
        import os
        import json
        import time
        import socket
        import struct

        # 目标URL列表
        urls = [
            'https://ip.164746.xyz', 
            'https://cf.090227.xyz', 
            'https://stock.hostmonit.com/CloudFlareYes',
            'https://www.wetest.vip/page/cloudflare/address_v4.html'
        ]

        # 正则表达式用于匹配IP地址
        ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'

        # 使用集合存储IP地址实现自动去重
        unique_ips = set()

        for url in urls:
            try:
                # 添加User-Agent头以避免被某些网站阻止
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                
                # 发送HTTP请求获取网页内容
                response = requests.get(url, headers=headers, timeout=10)
                
                # 确保请求成功
                if response.status_code == 200:
                    # 获取网页的文本内容
                    html_content = response.text
                    
                    # 使用正则表达式查找IP地址
                    ip_matches = re.findall(ip_pattern, html_content, re.IGNORECASE)
                    
                    # 将找到的IP添加到集合中（自动去重）
                    unique_ips.update(ip_matches)
                    print(f'从 {url} 找到 {len(ip_matches)} 个IP地址')
                else:
                    print(f'请求 {url} 失败，状态码: {response.status_code}')
            except requests.exceptions.RequestException as e:
                print(f'请求 {url} 失败: {e}')
                continue

        # 已知的CloudFlare IP段和国家对应关系
        cloudflare_ranges = {
            # 北美
            '173.245.48.0/20': '美国',
            '103.21.244.0/22': '美国',
            '103.22.200.0/22': '美国',
            '103.31.4.0/22': '美国',
            '141.101.64.0/18': '美国',
            '108.162.192.0/18': '美国',
            '190.93.240.0/20': '美国',
            '188.114.96.0/20': '美国',
            '197.234.240.0/22': '美国',
            '198.41.128.0/17': '美国',
            '162.158.0.0/15': '美国',
            '104.16.0.0/13': '美国',
            '104.24.0.0/14': '美国',
            '172.64.0.0/13': '美国',
            '131.0.72.0/22': '美国',
            
            # 欧洲
            '103.22.200.0/22': '英国',
            '141.101.64.0/18': '德国',
            '108.162.192.0/18': '荷兰',
            '190.93.240.0/20': '荷兰',
            '188.114.96.0/20': '英国',
            '197.234.240.0/22': '南非',
            '198.41.128.0/17': '美国',
            '162.158.0.0/15': '荷兰',
            '104.16.0.0/13': '英国',
            '104.24.0.0/14': '德国',
            '172.64.0.0/13': '法国',
            '131.0.72.0/22': '巴西',
            
            # 亚洲
            '103.21.244.0/22': '新加坡',
            '103.22.200.0/22': '日本',
            '103.31.4.0/22': '澳大利亚',
            '141.101.64.0/18': '香港',
            '108.162.192.0/18': '新加坡',
            '190.93.240.0/20': '香港',
            '188.114.96.0/20': '日本',
            '197.234.240.0/22': '韩国',
            '198.41.128.0/17': '印度',
            '162.158.0.0/15': '新加坡',
            '104.16.0.0/13': '日本',
            '104.24.0.0/14': '香港',
            '172.64.0.0/13': '新加坡',
            '131.0.72.0/22': '澳大利亚'
        }

        # IP地址转换为整数
        def ip_to_int(ip):
            return struct.unpack("!I", socket.inet_aton(ip))[0]

        # 检查IP是否在某个CIDR范围内
        def is_ip_in_cidr(ip, cidr):
            try:
                network, bits = cidr.split('/')
                network_int = ip_to_int(network)
                ip_int = ip_to_int(ip)
                mask = (0xFFFFFFFF << (32 - int(bits))) & 0xFFFFFFFF
                return (ip_int & mask) == (network_int & mask)
            except:
                return False

        # 获取IP地理位置信息的函数
        def get_ip_location(ip):
            # 首先检查是否是CloudFlare的IP段
            for cidr, country in cloudflare_ranges.items():
                if is_ip_in_cidr(ip, cidr):
                    return f"{ip}#{country}"
            
            # 如果不是CloudFlare IP，尝试使用多个API获取位置
            apis = [
                f"http://ip-api.com/json/{ip}?fields=status,message,country,countryCode",
                f"https://ipapi.co/{ip}/country_name/",
                f"http://ipinfo.io/{ip}/country"
            ]
            
            for api_url in apis:
                try:
                    time.sleep(0.1)  # 避免请求过于频繁
                    response = requests.get(api_url, timeout=5)
                    
                    if api_url.startswith('http://ip-api.com'):
                        data = response.json()
                        if data.get('status') == 'success':
                            return f"{ip}#{data.get('country', '未知')}"
                    
                    elif api_url.startswith('https://ipapi.co'):
                        country = response.text.strip()
                        if country and country != 'Undefined':
                            return f"{ip}#{country}"
                    
                    elif api_url.startswith('http://ipinfo.io'):
                        country = response.text.strip()
                        if country and country != 'Undefined':
                            return f"{ip}#{country}"
                            
                except:
                    continue
            
            return f"{ip}#未知位置"

        # 将去重后的IP地址按数字顺序排序并添加位置信息后写入文件
        if unique_ips:
            # 按IP地址的数字顺序排序（非字符串顺序）
            sorted_ips = sorted(unique_ips, key=lambda ip: [int(part) for part in ip.split('.')])
            
            # 为每个IP获取地理位置信息
            ip_with_location = []
            for ip in sorted_ips:
                location = get_ip_location(ip)
                ip_with_location.append(location)
                print(f"获取 {ip} 的地理位置信息: {location.split('#')[1]}")
            
            with open('ip.txt', 'w') as file:
                for ip_line in ip_with_location:
                    file.write(ip_line + '\n')
            print(f'已保存 {len(ip_with_location)} 个带位置信息的IP地址到ip.txt文件。')
        else:
            print('未找到有效的IP地址。')
            # 创建一个空文件，避免后续步骤出错
            with open('ip.txt', 'w') as file:
                file.write('')
        EOF
        
        python fetch_ips.py

    - name: Check for changes
      id: git-check
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push if changed
      if: steps.git-check.outputs.changed == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add ip.txt
        git commit -m "Auto-update IP addresses - $(date +'%Y-%m-%d %H:%M:%S')"
        git push
